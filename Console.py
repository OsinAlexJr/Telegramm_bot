from aiogram import types
from aiogram.types import InlineKeyboardButton, \
    InlineKeyboardMarkup
import logging, time
from Person import Person, Password
from constants import *
from RegEx import *
import sys, asyncio

# –ö–æ–Ω—Å–æ–ª—å —Å–æ –≤—Å–µ–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
class Cansole():
    def __init__(self): # –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
        self.user = InlineKeyboardButton("–î–ª—è –ø–æ—Å—Ç—É–ø–∞—é—â–∏—Ö", callback_data='user')
        self.student = InlineKeyboardButton('–î–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤', callback_data='students')
        self.button_magistr = InlineKeyboardButton('–î–ª—è –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—ã', callback_data="magistr")
        self.button_contact = InlineKeyboardButton('–ö–æ–Ω—Ç–∞–∫—Ç—ã', callback_data='go')
        self.button_admins = InlineKeyboardButton('–î–Ω–∏ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥–≤–µ—Ä–µ–π –Ω–∞ 2023 –≥–æ–¥', callback_data="info")
        self.button_about_free_studies = InlineKeyboardButton("–ö–∞–∫ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏—Å—å –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ?", callback_data="return")
        self.button_adress = InlineKeyboardButton("–ê–¥—Ä–µ—Å", callback_data='map', url="https://www.google.com/maps/place/%D1%83%D0%BB.+%D0%9C%D0%BE%D1%85%D0%BE%D0%B2%D0%B0%D1%8F,+11,+%D1%81%D1%82%D1%80.+1,+%D0%9C%D0%BE%D1%81%D0%BA%D0%B2%D0%B0,+125009/@55.7553848,37.6095687,17z/data=!3m1!4b1!4m5!3m4!1s0x46b54a503d4131f9:0xb89653ca2757f711!8m2!3d55.7553848!4d37.6117574?hl=ru")
        self.button_more_info = InlineKeyboardButton("–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", callback_data="new", url="https://iaas.msu.ru/abiturientam/abiturientam-opendoors/")

        self.flag = False
        self.security = False
        self.security_id = None
        self.Password = None
        self.add_admin_flag = None
        self.set_flag = None
        self.set_id = None
        self.QUASTION = QUASTION
        self.MAIN_QUASTION = MAIN_QUASTION
        self.GO_title = 'Hi'
        self.remove_flag = False


    def start(self) -> None:#–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç –≤ —Ç–µ–ª–ª–µ–≥—Ä–∞–º–µ
        main_key = InlineKeyboardMarkup().add(self.user, self.student, self.button_magistr)
        keyBoard_user = InlineKeyboardMarkup().add(self.button_contact, self.button_admins)
        keyBoard_students = InlineKeyboardMarkup().add(self.button_about_free_studies)
        keys = InlineKeyboardMarkup(row_width=2).add(self.button_adress)
        key_in = InlineKeyboardMarkup().add(self.button_more_info)

        @rp.callback_query_handler(lambda c: (c.data == 'magistr'))
        async def go(cq: types.CallbackQuery):
            await bot.answer_callback_query(cq.id)
            await bot.send_message(cq.from_user.id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—ã")

        @rp.callback_query_handler(lambda c: (c.data == 'user'))
        async def go(cq: types.CallbackQuery):
            await bot.answer_callback_query(cq.id)
            await bot.send_message(cq.from_user.id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç—É–ø–∞—é—â–∏—Ö", reply_markup=keyBoard_user)

        @rp.callback_query_handler(lambda c: (c.data == 'students'))
        async def go(cq: types.CallbackQuery):
            await bot.answer_callback_query(cq.id)
            await bot.send_message(cq.from_user.id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —É—á–∞—â–∏—Ö—Å—è", reply_markup=keyBoard_students)

        @rp.callback_query_handler(lambda c: (c.data == 'return'))
        async def go(cq: types.CallbackQuery):
            await bot.answer_callback_query(cq.id)
            await bot.send_message(cq.from_user.id, "–ü–µ—Ä–µ–≤–æ–¥ —Å –ª—é–±–æ–≥–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ –æ–±—Å—É–∂–¥–∞–µ—Ç—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π. –ù–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å –µ—Å—Ç—å –ª–∏ —Å–≤–æ–±–æ–¥–Ω—ã–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –º–µ—Å—Ç–∞ (—ç—Ç–æ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –∑–¥–µ—Å—å üëâüèº http://edu.msu.ru/plata/). –ó–∞ –ø–æ–º–æ—â—å—é –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –≤ –∏–Ω—Å—Ç–∏—Ç—É—Ç—Å–∫–∏–π —Å–æ–≤–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤(–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç –±–æ—Ç–µ –≤–æ–ø—Ä–æ—Å) –∏–ª–∏ –≤ –ø—Ä–æ—Ñ—Å–æ—é–∑ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ `+7 (495) 629-43-49`. –°—Ç—É–¥–µ–Ω—Ç–∞–º 1 –∫—É—Ä—Å–∞ –Ω–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–µ—Å—Ç–∏—Å—å –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ:(.", parse_mode="MARKDOWN")

        @rp.callback_query_handler(lambda c: (c.data == 'new'))
        async def go(cq: types.CallbackQuery):
            await bot.answer_callback_query(cq.id)

        @rp.callback_query_handler(lambda c: (c.data == 'info'))
        async def go(cq: types.CallbackQuery):
            await bot.answer_callback_query(cq.id)
            await bot.send_message(cq.from_user.id, "–î–Ω–∏ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥–≤–µ—Ä–µ–π:\nüìÜ18 –º–∞—è 2023 –≥–æ–¥ 19:00\nüìÜ20 –º–∞—Ä—Ç–∞ 2023 13:00 - 15:00\nüìÜ20 —Ñ–µ–≤—Ä–∞–ª—è 13:00 - 15:00(–¥–ª—è –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç—É–ø–∞—é—â–∏—Ö)", reply_markup=key_in)

        @rp.callback_query_handler(lambda c: (c.data == 'map'))
        async def go(cq: types.CallbackQuery):
            await bot.answer_callback_query(cq.id)

        @rp.callback_query_handler(lambda c: (c.data == 'go'))
        async def go(cq: types.CallbackQuery):
            await bot.answer_callback_query(cq.id)
            await bot.send_message(cq.from_user.id, "‚òé–¢–µ–ª–µ—Ñ–æ–Ω: `+7 (495) 629-43-49`\nüì©–ü–æ—á—Ç–∞: `office@iaas.msu.ru`\nüì´–ê–¥—Ä–µ—Å: 125009, –≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ú–æ—Ö–æ–≤–∞—è, –¥. 11, —Å—Ç—Ä. 1(–°—Å—ã–ª–∫–∞ –Ω–∞ google mapsüëá)", reply_markup=keys, parse_mode="MARKDOWN")


        @rp.message_handler(commands=['start'])
        async def procces_to_start_bot(mg=types.Message):
            Name = mg.from_user.full_name
            Id = mg.from_user.id
            object = Person(Id)
            logging.info(f'{Id} {Name} {time.asctime()}')
            await bot.send_message(Id, f'Hello, {Name}!\n{self.QUASTION}', reply_markup=main_key)
            if object():
                await bot.send_message(Id, f'{self.MAIN_QUASTION}')
            return None

    def send(self)->None:#–û–±—ã—á–Ω–æ–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        @rp.message_handler(content_types='text')
        async def proccess_to_send_message(mg=types.Message):
            object = Person(mg.from_user.id)
            if object():
                if self.set_flag:
                    object = Set()
                    if Check_result(object(mg.text)):
                        await bot.send_message(mg.from_user.id, '–í—ã –º–æ–≥–ª–∏ –¥–æ–ø—É—Å—Ç–∏—Ç—å –æ—à–∏–±–∫—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ.')
                        return None

                    start_title, end_title = object(mg.text)
                    if start_title == '1':
                        self.QUASTION = end_title
                    elif start_title == '2':
                        self.MAIN_QUASTION = end_title
                    elif start_title == '3':
                        self.GO_title = end_title
                    self.set_falg = False
                    return None

                elif self.flag:
                    object = Text()
                    if Check_result(object(mg.text)):
                        await bot.send_message(mg.from_user.id, '–í—ã –º–æ–≥–ª–∏ –¥–æ–ø—É—Å—Ç–∏—Ç—å –æ—à–∏–±–∫—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ.')
                        return None
                    id, text = object(mg.text)
                    try:
                        await bot.send_message(id, text)
                    except:
                        await bot.send_message(mg.from_user.id, 'id –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 10 —á–∏—Å–µ–ª')

                    self.flag = False
                    return None

                elif self.security:
                    if mg.text == self.Password:
                        await bot.send_message(self.security_id, f'`{TOKEN}`', parse_mode='MARKDOWN')
                    self.security = False
                    self.security_id = None
                    return None

                elif self.remove_flag:
                    Id = mg.text
                    try:
                        Index = ADMINS.index(int(Id))
                        del ADMINS[Index]
                        await bot.send_message(mg.from_user.id, '–ê–¥–º–∏–Ω –±—ã–ª —É–¥–∞–ª—ë–Ω.')
                    except:
                        await bot.send_message('–ù–∞–≤–µ—Ä–Ω–æ–µ –≤—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ Id')

            if self.add_admin_flag and mg.from_user.id == self.security_id:
                if mg.text == self.Password:
                    ADMINS.append(self.security_id)
                    await bot.send_message(self.security_id, '–¢–µ–ø–µ—Ä—å –≤—ã –∞–¥–º–∏–Ω')
                self.add_admin_flag = False
                self.security_id = None
                self.Password = None
                return None

            Name = mg.from_user.full_name
            Id = mg.from_user.id
            object = Person(Id)
            if object():
                return None
            await bot.send_message(ADMINS[1], f'Hello, @Asomersby. You have one more message from {Name}, id adress is `{Id}`:\n{mg.text}', parse_mode='MARKDOWN')
            await bot.send_message(ADMINS[1], 'To resend an answear print command, id and message')
            return None

    def resend(self)->None:#–ü–µ—Ä–µ–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π(–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
        @rp.message_handler(commands=['resend'], content_types='text')
        async def procces_to_resend_message(mg=types.Message):
            self.flag = True
            await mg.reply('–ß—Ç–æ –±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å: 1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: Id - Message(–Ω—É–∂–Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å—Ç–∞–≤–∏—Ç—å –ø—Ä–æ–±–µ–ª—ã –º–µ–∂–¥—É –≤—Å–µ–º–∏ —Å–ª–æ–≤–∞–º–∏), 2. –û—Ç–≤–µ—á–∞—Ç—å –º–æ–∂–Ω–æ –ø–æ–ª—Å–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã /resend')

    def get(self) -> None:#–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞
        @rp.message_handler(commands=['get'], content_types='text')
        async def procces_to_get_Token(mg=types.Message):
            object = Password()
            self.Password = object()
            self.security = True
            self.security_id = mg.from_user.id
            await bot.send_message(ADMINS[1], f'–ü–∞—Ä–æ–ª—å `{self.Password}`', parse_mode='MARKDOWN ')
            await bot.send_message(self.security_id, '–ß—Ç–æ –±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –≤–≤–µ–¥–∏—Ç–µ –ø–æ—Ä–æ–ª—å, –ø–æ—Å–ª–∞–Ω–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.')


    def add(self):
        @rp.message_handler(commands=['add'])
        async def procces_to_add_admins(mg=types.Message):
            if self.security_id != None:
                await asyncio.sleep(10)
            await bot.send_message(mg.from_user.id, '–ß—Ç–æ –±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞, –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –ø–æ—Ä–æ–ª—å –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏—Å–ª–∞–ª–∏ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω—É')
            self.add_admin_flag = True
            object = Password()
            self.security_id = mg.from_user.id
            self.Password = object()
            await bot.send_message(ADMINS[1], f'`{self.Password}`', parse_mode='MARKDOWN')

    def set(self):
        @rp.message_handler(commands=['set'])
        async def procces_to_set(mg=types.Message):
            object = Person(mg.from_user.id)
            if not object():
                return None
            elif object():
                await bot.send_message(mg.from_user.id, f'–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç —Ä–µ–ø–ª–∏–∫–∏ –±–æ—Ç–∞ —Å–ª–µ–¥—É–π—Ç–µ —ç—Ç–æ–º—É —à–∞–±–ª–æ–Ω—É: –Ω–æ–º–µ—Ä —Ä–µ–ø–ª–∏–∫–∏ - –ù–æ–≤–∞—è —Ä–µ–ø–æ–∏–∫–∞\n –°–ø–∏—Å–æ–∫ —Ä–µ–ø–ª–∏–∫ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω –Ω–∏–∂–µ:\n\t 1 - {QUASTION}\n\t 2 - {MAIN_QUASTION}\n\t 3 - {self.GO_title} \nPs –ß—Ç–æ–±—ã –ø–æ–º–µ–Ω—è—Ç—å –¥–≤–µ –∏–ª–∏ –±–æ–ª—å—à–µ —Ä–µ–ø–ª–∏–∫ –Ω—É–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /set')
                self.set_flag = True
    def riot(self):
        @rp.message_handler(commands=['riot'])
        def exit_procces(mg=types.Message):
            object = Person(mg.from_user.id)
            if object():
                sys.exit('Error: Call to exit: Tellegram call')
            else:
                return None
    def destroy(self):
        @rp.message_handler(commands=['remove'])
        async def remove_procces(mg=types.Message):
            if Person(mg.from_user.id):
                self.remove_flag = True
                await bot.send_message(mg.from_user.id, '–ü—Ä–æ—Å—Ç–æ –∑–∞–ø–∏—à–∏—Ç–µ id')
    def restart(self):
        @rp.message_handler(commands=['restart'])
        async def restart_procces(mg=types.Message):
            global ADMINS
            if Person(mg.from_user.id):
                self.flag = False
                self.security = False
                self.security_id = None
                self.Password = None
                self.add_admin_flag = None
                self.set_flag = None
                self.QUASTION = QUASTION
                self.MAIN_QUASTION = MAIN_QUASTION
                self.GO_title = 'Hi'
                self.remove_flag = False
                ADMINS = ["Your id"]



